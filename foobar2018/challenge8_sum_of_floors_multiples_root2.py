def sum_of_floors_multiples_root2(str_n):
    """
    Given a string str_n with the decimal representation of a
    positive integer N, this function computes the sum

        S(N) = floor(1*sqrt(2)) + floor(2*sqrt(2)) + ... + floor(N*sqrt(2))

    and outputs it as a string.
    The N is assumed to be not larger than 10^{100}, in particular
    long enough for computing each term being too slow.

    Example: If str_n = "5", then output "19"
    Example: If str_n = "77", then output "4208"
    
    The idea here is to notice that we need to sum the terms of a
    Beatty sequence 
        (https://en.wikipedia.org/wiki/Beatty_sequence)
    its complementary
        floor(1*(2+sqrt(2))) + floor(2*(2+sqrt(2))) + ... + floor(M*(2+sqrt(2)))
    sums the numbers from 1 to floor(N*sqrt(2)) that are not in the first one
    for M = floor(floor(N*sqrt(2))/(2+sqrt(2))). This allows you to reduce to a new sum,
    with less terms. But from this sum we can take out the k*2 from each floor getting us back
    to a sum with sqrt(2) again.
    
    This results in the recurrence S(N) = n*s + n*(n+1)/2 - s*(s+1)/2 - S(s),
    where s = floor((sqrt(2)-1)*n).
    """
    # We need to compute floor((sqrt(2)-1)*n) for large values of n.
    # We can take advantage of Python handling of int for arbitrary 
    # number of digits. We can precompute sqrt(2)-1 with large 
    # enough precision. I put Wolframalpha to do it, but if necessary
    # it is simple to do using its continued fraction, 
    #     sqrt(2)-1 = 1/(2+1/(2+1/(2+....
    # computing the numerator A and denominator B, using the recurrences for 
    # the convergents
    #     (https://en.wikipedia.org/wiki/Continued_fraction#Infinite_continued_fractions_and_convergents)
    # The denominators will increase fast. As soon as the denominator of a convergent has more than
    # 50 digits, then the A/B will have at least 100 decimals of sqrt(2)-1.
    # Compute 10^M*A//B for a sufficiently large M, like len(str(B))+1.
    # Here is a string containing over 3000 digits (actually 3647) of sqrt(2)-1.
    # We only really need a bit more than a 100 digits, though, but it 
    # looks fun these many and it makes it work for inputs much larger than 
    # 10^{100}. We got to have fun.
    SQRT2minusONE = ("4142135623730950488016887242096980785696718"
    "753769480731766797379907324784621070388503875343276415"
    "727350138462309122970249248360558507372126441214970999"
    "358314132226659275055927557999505011527820605714701095"
    "599716059702745345968620147285174186408891986095523292"
    "304843087143214508397626036279952514079896872533965463"
    "318088296406206152583523950547457502877599617298355752"
    "203375318570113543746034084988471603868999706990048150"
    "305440277903164542478230684929369186215805784631115966"
    "687130130156185689872372352885092648612494977154218334"
    "204285686060146824720771435854874155657069677653720226"
    "485447015858801620758474922657226002085584466521458398"
    "893944370926591800311388246468157082630100594858704003"
    "186480342194897278290641045072636881313739855256117322"
    "040245091227700226941127573627280495738108967504018369"
    "868368450725799364729060762996941380475654823728997180"
    "326802474420629269124859052181004459842150591120249441"
    "341728531478105803603371077309182869314710171111683916"
    "581726889419758716582152128229518488472089694633862891"
    "562882765952635140542267653239694617511291602408715510"
    "135150455381287560052631468017127402653969470240300517"
    "495318862925631385188163478001569369176881852378684052"
    "287837629389214300655869568685964595155501644724509836"
    "896036887323114389415576651040883914292338113206052433"
    "629485317049915771756228549741438999188021762430965206"
    "564211827316726257539594717255934637238632261482742622"
    "208671155839599926521176252698917540988159348640083457"
    "085181472231814204070426509056532333398436457865796796"
    "519267292399875366617215982578860263363617827495994219"
    "403777753681426217738799194551397231274066898329989895"
    "386728822856378697749662519966583525776198939322845344"
    "735694794962952168891485492538904755828834526096524096"
    "542889394538646625744927556381964410316979833061852019"
    "379384940057156333720548068540575867999670121372239475"
    "821426306585132217408832382947287617393647467837431960"
    "001592188807347857617252211867490424977366929207311096"
    "369721608933708661156734585334833295254675851644710757"
    "848602463600834449114818587655554286455123314219926311"
    "332517970608436559704352856410087918500760361009159465"
    "670676883605571740076756905096136719401324935605240185"
    "999105062108163597726431380605467010293569971042425105"
    "781749531057255934984451126922780344913506637568747760"
    "283162829605532422426957534529028838768446429173282770"
    "888318087025339852338122749990812371892540726475367850"
    "304821591801886167108972869229201197599880703818543332"
    "536460211082299279293072871780799888099176741774108983"
    "060800326311816427988231171543638696617029999341616148"
    "786860180455055539869131151860103863753250045581860448"
    "040750241195184305674533683613674597374423988553285179"
    "308960373898915173195874134428817842125021916951875593"
    "444387396189314549999906107587049090260883517636224749"
    "757858858368037457931157339802099986622186949922595913"
    "276423619410592100328026149874566599688874067956167391"
    "859572888642473463585886864496822386006983352642799056"
    "283165613913942557649062065186021647263033362975075697"
    "870606606856498160092718709292153132368281356988937097"
    "416504474590960537472796524477094099241238710614470543"
    "986743647338477454819100872886222149589529591187892149"
    "179833981083788278153065562315810360648675873036014502"
    "273208829351341387227684176678436905294286984908384557"
    "445794095986260742499549168028530773989382960362133539"
    "875320509199893607513906444495768456993471276364507163"
    "279154701597733548638939423257277540038260274785674172"
    "580951416307159597849818009443560379390985590168272154"
    "034581581521004936662953448827107292396602321638238266"
    "612626830502572781169451035379371568823365932297823192"
    "986064679789864092085609558142614363631004615594332550"
    "4744939759339991254195323009321753044765")
    # Getting it into an int
    INT_SQRT2 = int(SQRT2minusONE)
    try:
        N = int(str_n)
    except:
        return 0
    def S(r):
        """
        This computes the sum recursively.
        It can also be unwrapped to be iterative, but 
        I didn't bother.
        """
        if r == 0:
            return 0
        try:
            # This is computing floor((sqrt(2)-1)*r)
            # Multiply INT_SQRT2 by r and then divide by 
            # 10^{3647}, which we do by taking those many digits
            # from the beginning of the corresponding string.
            s = int(str(INT_SQRT2*r)[:-3647])
        except:
            s = 0
        return r*s+(r*(r+1))//2 - (s*(s+1))//2 - S(s)
    return S(N)
